version: "3.9"

networks:
  app-net:
    driver: bridge

volumes:
  auth_pgdata:
  booking_pgdata:

services:
  # ---------- AUTH SERVICE ----------
  auth_service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: auth_service
    container_name: auth-service
    command: ["/usr/local/bin/app"]
    environment:
      - AUTH_DB_HOST=auth-postgres
      - AUTH_DB_PORT=5432            # внутри сети Postgres слушает 5432
      - AUTH_DB_USER=postgres
      - AUTH_DB_PASSWORD=postgres
      - AUTH_DB_NAME=user_data
      - AUTH_SERV_HOST=0.0.0.0
      - AUTH_SERV_PORT=8080
    depends_on:
      db_auth:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      # если у вас другой путь — замените /health
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 15
    restart: unless-stopped
    networks:
      - app-net

  db_auth:
    image: postgres:16
    container_name: auth-postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_data
    ports:
      - "5432:5432"   # публикация на хост (не влияет на межконтейнерный порт)
    volumes:
      - auth_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d user_data"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      app-net:
        aliases:
          - auth-postgres

  # ---------- BOOKING SERVICE ----------
  booking_service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE: booking_service
    container_name: booking-service
    command: ["/usr/local/bin/app"]
    environment:
      - BOOKING_DB_HOST=booking-postgres
      - BOOKING_DB_PORT=5432         # ВАЖНО: 5432, а не 5433
      - BOOKING_DB_USER=postgres
      - BOOKING_DB_PASSWORD=postgres
      - BOOKING_DB_NAME=booking_data
      - BOOKING_SERV_HOST=0.0.0.0
      - BOOKING_SERV_PORT=8081
    depends_on:
      db_booking:
        condition: service_healthy
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8081/health"]
      interval: 5s
      timeout: 3s
      retries: 15
    restart: unless-stopped
    networks:
      - app-net

  db_booking:
    image: postgres:16
    container_name: booking-postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=booking_data
    ports:
      - "5433:5432"   # наружу на 5433, внутри сети — всё равно 5432
    volumes:
      - booking_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d booking_data"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      app-net:
        aliases:
          - booking-postgres
